openapi: 3.0.3
info:
  title: GoFr Blog Service API
  description: A RESTful blog service built with GoFr framework for GoFr Summer of Code
  version: 1.0.0
  contact:
    name: GoFr Blog Service
    url: https://github.com/SAMMILLERR/gofr-SCO-blog-service

servers:
  - url: http://localhost:8080
    description: Local development server

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check endpoint
      description: Returns the health status of the service
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  service:
                    type: string
                    example: "gofr-blog-service"
                  version:
                    type: string
                    example: "1.0.0"

  /posts:
    get:
      tags:
        - Posts
      summary: List all posts
      description: Retrieve a paginated list of blog posts
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          description: Number of posts per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: List of posts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Posts
      summary: Create a new post
      description: Create a new blog post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/{id}:
    get:
      tags:
        - Posts
      summary: Get a specific post
      description: Retrieve a blog post by its ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post to retrieve
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Post retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid post ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Posts
      summary: Update a post
      description: Update an existing blog post
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post to update
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePostRequest'
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid request data or post ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Posts
      summary: Delete a post
      description: Delete a blog post by its ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post to delete
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Post deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Post deleted successfully"
        '400':
          description: Invalid post ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Post:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the post
          example: 1
        title:
          type: string
          description: Title of the post
          example: "Introduction to GoFr Framework"
        content:
          type: string
          description: Content body of the post
          example: "GoFr is a powerful Go framework for building microservices..."
        slug:
          type: string
          description: URL-friendly slug for the post
          example: "introduction-to-gofr-framework"
        author_id:
          type: integer
          description: ID of the post author
          example: 123
        status:
          type: string
          enum: [draft, published, archived]
          description: Publication status of the post
          example: "published"
        created_at:
          type: string
          format: date-time
          description: Timestamp when the post was created
          example: "2025-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the post was last updated
          example: "2025-01-15T14:20:00Z"

    CreatePostRequest:
      type: object
      required:
        - title
        - content
        - slug
        - author_id
      properties:
        title:
          type: string
          description: Title of the post
          example: "Introduction to GoFr Framework"
          minLength: 1
          maxLength: 200
        content:
          type: string
          description: Content body of the post
          example: "GoFr is a powerful Go framework for building microservices..."
          minLength: 1
        slug:
          type: string
          description: URL-friendly slug for the post
          example: "introduction-to-gofr-framework"
          minLength: 1
          maxLength: 200
        author_id:
          type: integer
          description: ID of the post author
          example: 123
          minimum: 1
        status:
          type: string
          enum: [draft, published, archived]
          description: Publication status of the post
          example: "draft"
          default: "draft"

    UpdatePostRequest:
      type: object
      properties:
        title:
          type: string
          description: Title of the post
          example: "Updated Introduction to GoFr Framework"
          minLength: 1
          maxLength: 200
        content:
          type: string
          description: Content body of the post
          example: "GoFr is a powerful Go framework for building microservices and web applications..."
          minLength: 1
        status:
          type: string
          enum: [draft, published, archived]
          description: Publication status of the post
          example: "published"

    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: Current page number
          example: 1
        page_size:
          type: integer
          description: Number of items per page
          example: 10
        total_count:
          type: integer
          description: Total number of items
          example: 150

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Invalid request format"
        details:
          type: string
          description: Additional error details
          example: "Title field is required"

tags:
  - name: Health
    description: Health check endpoints
  - name: Posts
    description: Blog post management operations
